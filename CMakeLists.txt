CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
GET_FILENAME_COMPONENT(PROJECTNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
STRING(REPLACE " " "_" PROJECTNAME ${PROJECTNAME})
PROJECT(${PROJECTNAME} LANGUAGES CXX)
SET(CMAKE_CXX_STANDARD 17)

# default to debug build
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

# Set output directory
SET(OUTPATH "${PROJECT_BINARY_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPATH}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${OUTPATH}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${OUTPATH}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUTPATH}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${OUTPATH}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${OUTPATH}")
SET(CMAKE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")

# Variables used later in branches
SET(C_FLAGS )
SET(L_FLAGS )

SET(INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)

IF("${CMAKE_BUILD_TYPE}" MATCHES Release)
    SET(C_FLAGS "${C_FLAGS} -O3 -DNDEBUG")
ELSE()
    SET(C_FLAGS "${C_FLAGS} -g -D_DEBUG -Wall")
ENDIF()

FILE(GLOB SOURCES ${PROJECT_SOURCE_DIR}/src/*.c**)

IF(NOT CORE_BUILD_TYPE)
  SET(CORE_BUILD_TYPE Multi)
ENDIF()

IF(CORE_BUILD_TYPE MATCHES Single)
  SET(C_FLAGS "${C_FLAGS} -DSINGLE_CALL")
  FOREACH(tool ${SOURCES})
    GET_FILENAME_COMPONENT(toolname ${tool} NAME)
    STRING(REPLACE ".cpp" "" toolname ${toolname})
    IF((NOT ${toolname} MATCHES "multicall") AND (NOT ${toolname} MATCHES "cmd"))
      ADD_EXECUTABLE(${toolname} ${tool} "src/cmd.cpp")

      TARGET_COMPILE_FEATURES(${toolname} PUBLIC cxx_std_17)

      TARGET_INCLUDE_DIRECTORIES(${toolname}
        PUBLIC
        ${INCLUDE_DIR}
	)

      # Set compile flags
      SET_PROPERTY(TARGET ${toolname} APPEND_STRING PROPERTY COMPILE_FLAGS ${C_FLAGS})
      SET_PROPERTY(TARGET ${toolname} APPEND_STRING PROPERTY LINK_FLAGS ${L_FLAGS})
    ENDIF()
  ENDFOREACH()
ELSEIF(CORE_BUILD_TYPE MATCHES Multi)
    SET(C_FLAGS "${C_FLAGS} -DMULTI_CALL")
    ADD_EXECUTABLE(${PROJECTNAME} ${SOURCES})
    TARGET_COMPILE_FEATURES(${PROJECTNAME} PUBLIC cxx_std_17)

    TARGET_INCLUDE_DIRECTORIES(${PROJECTNAME}
        PUBLIC
        ${INCLUDE_DIR}
    )

    # Set compile flags
    SET_PROPERTY(TARGET ${PROJECTNAME} APPEND_STRING PROPERTY COMPILE_FLAGS ${C_FLAGS})
    SET_PROPERTY(TARGET ${PROJECTNAME} APPEND_STRING PROPERTY LINK_FLAGS ${L_FLAGS})
    FOREACH(tool ${SOURCES})
    GET_FILENAME_COMPONENT(toolname ${tool} NAME)
    STRING(REPLACE ".cpp" "" toolname ${toolname})
    IF((NOT ${toolname} MATCHES "multicall") AND (NOT ${toolname} MATCHES "cmd"))
      ADD_CUSTOM_TARGET(${toolname} 
      ALL
      COMMAND ${CMAKE_COMMAND} -E create_symlink ${PROJECTNAME} ${OUTPATH}/${toolname})  
      ADD_DEPENDENCIES(${toolname} ${PROJECTNAME})
    ENDIF()
    ENDFOREACH()

    ELSE()
    MESSAGE(FATAL_ERROR "Invalid Build Type \"${CORE_BUILD_TYPE}\"   Valid types are Single or Multi")
ENDIF()
